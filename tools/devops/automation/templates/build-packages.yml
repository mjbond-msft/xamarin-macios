steps:
- checkout: self          # https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema#checkout
  clean: true             # Executes: git clean -ffdx && git reset --hard HEAD
  submodules: recursive

- checkout: maccore
  clean: true
  persistCredentials: true  # hugely important, else there are some scripts that check a single file from maccore that will fail

- checkout: templates
  clean: true

- checkout: release-scripts
  clean: true

- powershell: |
    gci env: | format-table -autosize -wrap
  displayName: 'Dump Environment'

- bash: |
    security set-key-partition-list -S apple-tool:,apple: -s -k $OSX_KEYCHAIN_PASS login.keychain
  env:
    OSX_KEYCHAIN_PASS: $(OSX_KEYCHAIN_PASS)
  displayName: 'Remove security UI-prompt (http://stackoverflow.com/a/40039594/183422)'
  condition: succeededOrFailed() # we do not care about the previous process cleanup

- task: xamops.azdevex.provisionator-task.provisionator@2
  displayName: 'Provision Brew components'
  inputs:
    provisioning_script: $(Build.SourcesDirectory)/xamarin-macios/tools/devops/provision-brew-packages.csx
    provisioning_extra_args: '-vvvv'
  enabled: false
  timeoutInMinutes: 30

- bash: |
    make -C $(Build.SourcesDirectory)/xamarin-macios/tools/devops build-provisioning.csx
  displayName: 'Generate provisionator files.'

- task: xamops.azdevex.provisionator-task.provisionator@1
  displayName: 'Provision Xcode'
  inputs:
    provisioning_script: $(Build.SourcesDirectory)/xamarin-macios/tools/devops/build-provisioning.csx
    provisioning_extra_args: '-vvvv'
  enabled: false
  timeoutInMinutes: 250

# Disabled
- task: xamops.azdevex.provisionator-task.provisionator@1
  displayName: 'Provision Objective Sharpie'
  inputs:
    provisioning_script: $(Build.SourcesDirectory)/xamarin-macios/tools/devops/provision-objective-sharpie.csx
    provisioning_extra_args: '-vvvv'
  enabled: false
  timeoutInMinutes: 30

- task: xamops.azdevex.provisionator-task.provisionator@1
  displayName: 'Provision .NET Core'
  inputs:
    provisioning_script: $(Build.SourcesDirectory)/xamarin-macios/tools/devops/provision-dotnetcore.csx
    provisioning_extra_args: '-vvvv'
  enabled: false
  timeoutInMinutes: 30

- powershell: |
    if ([IO.Directory]::Exists('/Developer/MonoTouch')) {
      Write-Host "Deleting /Developer/MonoTouch"
      bash -c "sudo rm -Rf /Developer/MonoTouch"
    }

    if ([IO.Directory]::Exists('/Library/Frameworks/Xamarin.iOS.framework')) {
      Write-Host "Deleting /Library/Frameworks/Xamarin.iOS.framework"
      bash -c "sudo rm -Rf /Library/Frameworks/Xamarin.iOS.framework"
    }

    if ([IO.Directory]::Exists('/Library/Frameworks/Xamarin.Mac.framework')) {
      Write-Host "Deleting /Library/Frameworks/Xamarin.Mac.framework"
      bash -c "sudo rm -Rf /Library/Frameworks/Xamarin.Mac.framework"
    }
  displayName: 'Delete library folders'
  timeoutInMinutes: 5

- bash:
    set -x
    set -e
    rm -Rvf $(Build.SourcesDirectory)/package
    time make -C $(Build.SourcesDirectory)/xamarin-macios/ git-clean-all
  displayName: 'Clear results directory'
  timeoutInMinutes: 5


# the following should be using the labels in the PR, we are not yet doing so, but we will in the
# future
- bash: |
    echo '##vso[task.setvariable variable=IsPR;isOutput=true]False'

    echo '##vso[task.setvariable variable=BuildPkgs;isOutput=true]True'
    echo '##vso[task.setvariable variable=SignPkgs;isOutput=true]True'

    echo '##vso[task.setvariable variable=BuildNugets;isOutput=true]True'

    echo '##vso[task.setvariable variable=HasRunInternalTests;isOutput=true]True'
    echo '##vso[task.setvariable variable=RunDeviceTests;isOutput=true]True'
  name: configuration
  displayName: "Parse PR labels"
  timeoutInMinutes: 5

- bash: |
    set -x
    set -e

    if [[ "$IsPR" == "True" ]]; then
      echo "Xamarin private packages NOT configured. Building a PR."
      CONFIGURE_FLAGS=""
    else
      echo "Xamarin private packages configured."
      CONFIGURE_FLAGS="--enable-xamarin"
    fi

    CONFIGURE_FLAGS="$CONFIGURE_FLAGS --enable-dotnet --enable-install-source"

    cd $(Build.SourcesDirectory)/xamarin-macios/
    ./configure $CONFIGURE_FLAGS
    echo $(cat $(Build.SourcesDirectory)/xamarin-macios/configure.inc)
  env:
    IsPR: variables['configuration.IsPR']
  displayName: "Configure build"
  timeoutInMinutes: 5

# Actual build of the project
- bash: |
    time make -C $(Build.SourcesDirectory)/xamarin-macios/ reset
    time make -C $(Build.SourcesDirectory)/xamarin-macios/ all -j8
    time make -C $(Build.SourcesDirectory)/xamarin-macios/ install -j8
  displayName: 'Build'
  timeoutInMinutes: 180

# build not signed .pkgs for the SDK
- bash: |
    set -x
    set -e
    rm -Rf $(Build.SourcesDirectory)/package/*.pkg
    rm -Rf $(Build.SourcesDirectory)/package/notarized/*.pkg
    time make -C $(Build.SourcesDirectory)/xamarin-macios/ package

    # output vars for other steps to use and not need to recomputed the paths
    IOS_PKG=$(find $(Build.SourcesDirectory)/package -type f -name "xamarin.ios-*" | xargs basename)
    if [ -z "$IOS_PKG" ]; then
      echo "Xamarin.iOS package not found."
    else
      IOS_PKG="$(Build.SourcesDirectory)/package/$IOS_PKG"
      echo "##vso[task.setvariable variable=IOS_PKG;]$IOS_PKG"
      echo "Xamarin.iOS package found at $IOS_PKG"
    fi

    MAC_PKG=$(find $(Build.SourcesDirectory)/package -type f -name "xamarin.mac-*" | xargs basename)
    if [ -z "$MAC_PKG" ]; then
      echo "Xamarin.Mac package not found."
    else
      MAC_PKG="$(Build.SourcesDirectory)/package/$MAC_PKG"
      echo "##vso[task.setvariable variable=MAC_PKG;]$MAC_PKG"
      echo "Xamarin.Mac package found at $MAC_PKG"
    fi
  name: packages
  displayName: 'Build Packages'
  condition: and(succeeded(), eq(variables['configuration.BuildPkgs'], 'True'))
  timeoutInMinutes: 180

# build nugets
- bash: |
    set -x
    set -e

    mkdir -p $(Build.SourcesDirectory)/package/
    DOTNET_NUPKG_DIR=$(make -C $(Build.SourcesDirectory)/xamarin-macios/tools/devops print-abspath-variable VARIABLE=DOTNET_NUPKG_DIR | grep "^DOTNET_NUPKG_DIR=" | sed -e 's/^DOTNET_NUPKG_DIR=//')
    rm -f $(Build.SourcesDirectory)/package/*.nupkg
    cp -c "$DOTNET_NUPKG_DIR"/*.nupkg $(Build.SourcesDirectory)/package

    DOTNET_PKG_DIR=$(make -C $(Build.SourcesDirectory)/xamarin-macios/tools/devops print-abspath-variable VARIABLE=DOTNET_PKG_DIR | grep "^DOTNET_PKG_DIR=" | sed -e 's/^DOTNET_PKG_DIR=//')
    make -C $(Build.SourcesDirectory)/xamarin-macios/dotnet package -j
    cp -c "$DOTNET_PKG_DIR"/*.pkg $(Build.SourcesDirectory)/package/
  displayName: 'Build Nugets'
  condition: and(succeeded(), eq(variables['configuration.BuildNugets'], 'True'))
  timeoutInMinutes: 180

- bash:  $(Build.SourcesDirectory)/xamarin-macios/tools/devops/automation/productsign.sh
  env:
    PRODUCTSIGN_KEYCHAIN_PASSWORD: $(xma-password)
  displayName: 'Signing PR Build'
  condition: and(succeeded(), eq(variables['configuration.SignPkgs'], 'True'), eq(variables['configuration.IsPr'], 'True'))

# HACK HACK: We shold not need to do this, the install of the certs template should be smart enough
- bash: |
    security delete-keychain builder.keychain
  displayName: 'Remove builder keychain'
  continueOnError: true

- template: install-certificates.yml@templates
  parameters:
    DeveloperIdApplication: $(developer-id-application)
    DeveloperIdInstaller: $(developer-id-installer)
    IphoneDeveloper: $(iphone-developer)
    MacDeveloper: $(mac-developer)
    HostedMacKeychainPassword: $(AzDO-OnPrem-KeychainPass)

# HACK HACK: brew remove python2, but the script uses python2, this is a dirty workaround
- bash: |
    wget https://raw.githubusercontent.com/Homebrew/homebrew-core/86a44a0a552c673a05f11018459c9f5faae3becc/Formula/python@2.rb
    brew install python@2.rb
    rm python@2.rb
  displayName: 'Install Python 2 and pip'

- bash: |
    VIRTUAL_ENV_PATH=$(Build.SourcesDirectory)/venv
    pip install virtualenv
    virtualenv "$VIRTUAL_ENV_PATH" --system-site-packages
    source "$VIRTUAL_ENV_PATH/bin/activate"
    pip install python-magic

    security unlock-keychain -p $PRODUCTSIGN_KEYCHAIN_PASSWORD builder.keychain
    PACKAGES="$IOS_PKG $MAC_PKG"
    echo "Packages found at $PACKAGES"

    echo "$PACKAGES" | xargs python $(Build.SourcesDirectory)/release-scripts/sign_and_notarize.py -a "$APP_ID" -i "$INSTALL_ID" -u "$APPLE_ACCOUNT" -p "$APPLE_PASS" -t "$TEAM_ID" -d $(Build.SourcesDirectory)/package/notarized -e "$MAC_ENTITLEMENTS" -k "$KEYCHAIN"

    deactivate
    rm -Rf "$VIRTUAL_ENV_PATH"
  env:
    PRODUCTSIGN_KEYCHAIN_PASSWORD: $(AzDO-OnPrem-KeychainPass)
    MAC_ENTITLEMENTS: $(Build.SourcesDirectory)/xamarin-macios/mac-entitlements.plist
    APP_ID: $(XamarinAppId)
    INSTALL_ID: $(XamarinAppId)
    APPLE_ACCOUNT: $(XamarinUserId)
    APPLE_PASS: $(XamarinPassword)
    TEAM_ID: $(TeamID)
    KEYCHAIN: $(SigningKeychain)
  name: notarize
  displayName: 'Signing Release Build'
  condition: and(succeeded(), eq(variables['configuration.SignPkgs'], 'True'), eq(variables['configuration.IsPr'], 'False'))
  timeoutInMinutes: 90

- template: generate-workspace-info.yml@templates
  parameters:
    GitHubToken: $(GitHub.Token)
    ArtifactDirectory: $(Build.SourcesDirectory)/package-internal

# upload each of the pkgs into the pipeline artifacts
- task: PublishPipelineArtifact@1
  displayName: 'Publish Build Artifacts'
  inputs:
    targetPath: $(Build.SourcesDirectory)/package
    artifactName: package
  continueOnError: true

- task: PublishPipelineArtifact@1
  displayName: 'Publish Build Internal Artifacts'
  inputs:
    targetPath: $(Build.SourcesDirectory)/package-internal 
    artifactName: package-internal
  continueOnError: true